{"version":3,"sources":["components/TodoAppTitle.js","components/TodoAppAdd.js","redux/actions.js","redux/types.js","components/TodoAppHeader.js","components/TodoAppDelete.js","components/TodoAppListItem.js","components/TodoAppList.js","components/TodoApp.js","App.js","serviceWorker.js","redux/store.js","redux/reducers.js","index.js"],"names":["TodoAppTitle","CardTitle","className","TodoAppAdd","props","state","value","Form","onSubmit","e","preventDefault","newContent","addTodo","setState","FormGroup","Row","Col","xs","Input","type","placeholder","this","onChange","target","Button","color","Component","mapDispatchToProps","content","dispatch","payload","connect","TodoAppHeader","deleteTodo","id","onClick","toggleTodo","completed","class","style","padding","textDecoration","todos","todoReducer","map","todo","TodoApp","Container","Card","CardBody","React","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","Math","random","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc459b0b.chunk.js","sourcesContent":["import React from \"react\";\nimport { CardTitle } from \"reactstrap\";\n\nconst TodoAppTitle = () => {\n  return <CardTitle className={\"text-center h2 mt-3 mb-4\"}>My Todos App</CardTitle>;\n};\n\nexport default TodoAppTitle;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../redux/actions\";\nimport { Form, Button, FormGroup, Label, Input, Row, Col } from \"reactstrap\";\n\nclass TodoAppAdd extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render() {\n    return (\n      <Form\n        onSubmit={(e) => {\n          /// formun default davranisi olan sayfa yenileme ve post etmeyi engelliyorum\n          e.preventDefault();\n          // statete tuttugum inputu son degerini aliyorum\n          const newContent = this.state.value;\n          this.props.addTodo(newContent);\n          this.setState({\n            value: \"\"\n          })\n        }}\n      >\n        <FormGroup>\n          <Row>\n            <Col className=\"ml-4\" xs=\"8\">\n              <Input\n                type=\"text\"\n                placeholder=\"Entry Todo\"\n                value={this.state.value}\n                onChange={(e) => {\n                  this.setState({\n                    value: e.target.value,\n                  });\n                }}\n              />\n            </Col>\n            <Col xs=\"3\">\n              <Button color=\"success\" type=\"submit\">Add Todo</Button>\n            </Col>\n          </Row>\n        </FormGroup>\n      </Form>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addTodo,\n};\n\nexport default connect(null, mapDispatchToProps)(TodoAppAdd);\n","import { ADD_TODO, TOGGLE_TODO, DELETE_TODO } from \"./types\";\n\nexport const addTodo = (content) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_TODO,\n      payload: content,\n    });\n  };\n};\n\nexport const toggleTodo = (id) => {\n  return (dispatch) => {\n    dispatch({\n      type: TOGGLE_TODO,\n      payload: id,\n    });\n  };\n};\n\nexport const deleteTodo = (id) => {\n  return {\n    type: DELETE_TODO,\n    payload: id,\n  };\n};\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n","import React from 'react';\nimport TodoAppTitle from \"./TodoAppTitle\";\nimport TodoAppAdd from \"./TodoAppAdd\";\n\nconst TodoAppHeader = (props) => {\n    return (\n        <div>\n            <TodoAppTitle />\n            <TodoAppAdd />\n        </div>\n    );\n};\n\nexport default TodoAppHeader;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { deleteTodo } from \"../redux/actions\";\nimport { Button } from \"reactstrap\";\n\nconst TodoAppDelete = ({ id, deleteTodo }) => {\n  return (\n    <Button\n      onClick={() => {\n        deleteTodo(id);\n      }}\n      color=\"danger\"\n    >\n      Delete\n    </Button>\n  );\n};\n\nconst mapDispatchToProps = {\n  deleteTodo,\n};\n\nexport default connect(null, mapDispatchToProps)(TodoAppDelete);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"../redux/actions\";\nimport TodoAppDelete from \"./TodoAppDelete\";\nimport { Col, Row } from \"reactstrap\";\n\nconst TodoAppListItem = ({ content, id, completed, toggleTodo }) => {\n  return (\n    <li class=\"list-group-item\">\n      <Row>\n        <Col xs=\"9\">\n          <div\n            className=\"border border-dark rounded\"\n            style={{\n              padding: 7,\n              color: completed ? \"red\" : \"black\",\n              textDecoration: completed ? \"line-through\" : \"initial\",\n            }}\n            onClick={() => toggleTodo(id)}\n          >\n            {content}\n          </div>\n        </Col>\n        <Col xs=\"3\">\n          <TodoAppDelete id={id} />\n        </Col>\n      </Row>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = {\n  toggleTodo: toggleTodo,\n};\n\nexport default connect(null, mapDispatchToProps)(TodoAppListItem);\n","import React from \"react\";\nimport TodoAppListItem from \"./TodoAppListItem\";\nimport { connect } from \"react-redux\";\n\nconst TodoAppList = ({ todos }) => {\n  return (\n    <ul className=\"list-group\">\n      {todos.map((todo) => {\n        return <TodoAppListItem {...todo} />;\n      })}\n    </ul>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todoReducer,\n  };\n};\n\nexport default connect(mapStateToProps)(TodoAppList);\n","import React from \"react\";\nimport TodoAppHeader from \"./TodoAppHeader\";\nimport TodoAppList from \"./TodoAppList\";\nimport { Container, Card, CardBody } from \"reactstrap\";\n\nclass TodoApp extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Card>\n          <TodoAppHeader />\n          <CardBody>\n            <TodoAppList />\n          </CardBody>\n        </Card>\n      </Container>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from \"./components/TodoApp\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { todoReducer } from \"./reducers\";\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst reducers = combineReducers({\n  todoReducer: todoReducer,\n});\n\nexport const store = createStore(reducers, applyMiddleware(thunk));\n","export const todoReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      return [\n        ...state,\n        {\n          id: Math.random(),\n          completed: false,\n          content: action.payload,\n        },\n      ];\n    case \"TOGGLE_TODO\":\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          return { ...todo, completed: !todo.completed };\n        }\n        return todo;\n      });\n    case \"DELETE_TODO\":\n      return state.filter((todo) => todo.id !== action.payload);\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}